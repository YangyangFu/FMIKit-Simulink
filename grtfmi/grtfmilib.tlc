%% 
%%  TLC library with utility functions for the FMU 
%%  model description (XML) generation.
%%

%function GetFMIType(typeName) void
  %switch typeName
    %case "real_T"
    %case "real32_T"
      %return "Real"
    %case "int8_T"
    %case "uint8_T"
    %case "int16_T"
    %case "uint16_T"
    %case "int32_T"
    %case "uint32_T"
      %return "Integer"
    %case "boolean_T"
      %return "Boolean"
    %default 
      %return "" 
  %endswitch
%endfunction

%function GetFMI3Type(typeName) void
  %switch typeName
    %case "real_T"
      %return "Float64"
    %case "real32_T"
      %return "Float32"
    %case "int8_T"
      %return "Int8"
    %case "uint8_T"
      %return "UInt8"
    %case "int16_T"
      %return "Int16"
    %case "uint16_T"
      %return "UInt16"
    %case "int32_T"
      %return "Int32"
    %case "uint32_T"
      %return "UInt32"
    %case "boolean_T"
      %return "Boolean"
    %default 
      %return "" 
  %endswitch
%endfunction

%function MinMaxAttributes(port, fmiType)
  %assign attributes = ""
  %if !ISFIELD(port, "BlockName")
    %return attributes
  %endif
  %switch fmiType
    %case "Real"
    %case "Float32"
    %case "Float64"
      %assign outmin       = FEVAL("get_param", "%<port.BlockName>", "Outmin")
      %assign outmin       = FEVAL("str2num", "%<outmin>")
      %if !ISEMPTY(outmin)
        %assign attributes = "%<attributes> min=\"%<outmin>\""
      %endif
      %assign outmax       = FEVAL("get_param", "%<port.BlockName>", "Outmax")
      %assign outmax       = FEVAL("str2num", "%<outmax>")
      %if !ISEMPTY(outmax)
        %assign attributes = "%<attributes> max=\"%<outmax>\""
      %endif
      %if ISFIELD(port, "UnitIdx")
        %assign unit = Units.Unit[port.UnitIdx].ASCIIEscapedUnitExpr
        %if !ISEMPTY(unit)
          %assign attributes = "%<attributes> unit=\"%<unit>\""
        %endif
      %endif
  %endswitch
  %return attributes
%endfunction

%function DescriptionAttribute(block)
  %assign attribute = ""
  %if !ISFIELD(block, "BlockName")
    %return attribute
  %endif
  %assign description = FEVAL("get_param", "%<block.BlockName>", "Description")
  %if !ISEMPTY(description)
    %assign attribute = " description=\"%<description>\""
  %endif
  %return attribute
%endfunction

%function GenerateSubsystemFMI(subSysIdx, vr) void
  %selectfile xmlfile
  %assign numVars = 0
  %assign subsystem = ::CompiledModel.BlockHierarchyMap.Subsystem[subSysIdx]
  %foreach bIdx = subsystem.NumBlocks
    %assign vr = GenerateBlockFMI(subsystem.Block[bIdx], subSysIdx, bIdx, vr)
  %endforeach
  %foreach ssIdx = subsystem.NumChildSubsystems
    %assign vr = GenerateSubsystemFMI(subsystem.ChildSubsystems[ssIdx], vr)
  %endforeach
  %return vr
%endfunction

%function GenerateBlockFMI(block, subSysIdx, blockIdx, vr) void
  %foreach idx = block.NumParameters
    %if block.Parameter[idx]._idx >= 0
      %assign param = ::CompiledModel.ModelParameters.Parameter[block.Parameter[idx]._idx]
      %if FEVAL("grtfmi_exclude_variable", "%<param.Identifier>", "%<VisibleParameters>")
        %continue
      %endif
      %assign vr = OutputParameterFMI(param, vr)
    %endif
  %endforeach
  %return vr
%endfunction

%function OutputParameterFMI2(param, vr)
  %assign parType      = ::CompiledModel.GlobalScope.tParametersType
  %assign defParam     = ::CompiledModel.GlobalScope.tDefaultParameters
  %assign sigSrc       = param.OwnerSysIdx
  %assign dtypeID      = LibGetRecordDataTypeId(param)
  %assign dataTypeName = SLibGetRecordDataTypeName(param, "")
  %assign valueType    = TYPE(param.Value)
  %assign width        = LibGetRecordWidth(param)
  %assign dims         = LibGetRecordDimensions(param)
  %assign nRows        = dims[0]
  %assign nCols        = SIZE(dims, 1) == 1 ? 1 : dims[1]
  %assign fmiType      = GetFMIType(dataTypeName)
  %if ISFIELD(param, "IsPseudoWorkspaceVar") && param.IsPseudoWorkspaceVar == "yes"
    %return vr
  %endif
  %if fmiType == ""
    %return vr
  %endif
  %if SIZE(dims, 1) > 2
    %return vr
  %endif
  %assign index = 0
  %foreach colid = nCols
  %foreach rowid = nRows
    %if nCols > 1 && nRows > 1
      %assign dataName     = "%<param.Identifier>[%<index>]"
      %assign variableName = "%<param.Identifier>[%<rowid+1>,%<colid+1>]"
    %elseif width > 1
      %assign dataName     = "%<param.Identifier>[%<index>]"
      %assign variableName = "%<param.Identifier>[%<index+1>]"
    %else
      %assign dataName     = "%<param.Identifier>"
      %assign variableName = "%<param.Identifier>"  
    %endif
    %if valueType == "Matrix"
      %assign startValue = param.Value[rowid][colid]
    %elseif valueType == "Vector"
      %assign startValue = param.Value[index]
    %else
      %assign startValue = param.Value
    %endif
    %if sigSrc[1] >= 0
      %assign varGroupIdx = FcnSysVarGroupIndex(::CompiledModel.System[sigSrc[0]], "Parameter", sigSrc[1]) 
      %assign dataName = ::CompiledModel.VarGroups.VarGroup[varGroupIdx].Name + "." + dataName
    %endif
    %selectfile xmlfile
    %switch dataTypeName
      %case "real_T"
      %case "real32_T"
        %if "%<startValue>" == "rtInf"
          %assign startValue = "INF"
        %elseif "%<startValue>" == "rtMinusInf"
          %assign startValue = "-INF"
        %elseif "%<startValue>" == "rtNaN"
          %assign startValue = "NAN"
        %else
          %assign startValue = FEVAL("strrep", "%<startValue>", "F", "")       
        %endif
        %break
      %case "uint8_T"
      %case "uint16_T"
      %case "uint32_T"
        %assign startValue = FEVAL("strrep", "%<startValue>", "U", "")
        %break
      %default
        %break
    %endswitch
    %assign startValue = FEVAL("strrep", "%<startValue>", "[", "")
    %assign startValue = FEVAL("strrep", "%<startValue>", "]", "")
    <ScalarVariable name="%<variableName>" valueReference="%<vr>" causality="parameter" variability="tunable">
      <%<fmiType> start="%<startValue>"/>
    </ScalarVariable>
    %selectfile incfile
    modelVariables[%<vr-1>].dtypeID = %<dtypeID>;
    modelVariables[%<vr-1>].size    = 0;
    modelVariables[%<vr-1>].address = &(rtmGetDefaultParam(S)->%<dataName>);
    %assign index = index + 1
    %assign vr = vr + 1
  %endforeach
  %endforeach
  %return vr
%endfunction

%function OutputParameterFMI3(param, vr)
  %assign parType      = ::CompiledModel.GlobalScope.tParametersType
  %assign defParam     = ::CompiledModel.GlobalScope.tDefaultParameters
  %assign sigSrc       = param.OwnerSysIdx
  %assign dtypeID      = LibGetRecordDataTypeId(param)
  %assign dataTypeName = SLibGetRecordDataTypeName(param, "")
  %assign valueType    = TYPE(param.Value)
  %assign width        = LibGetRecordWidth(param)
  %assign dims         = LibGetRecordDimensions(param)
  %assign nRows        = dims[0]
  %assign nCols        = SIZE(dims, 1) == 1 ? 1 : dims[1]
  %assign fmiType      = GetFMI3Type(dataTypeName)
  %if ISFIELD(param, "IsPseudoWorkspaceVar") && param.IsPseudoWorkspaceVar == "yes"
    %return vr
  %endif
  %if fmiType == ""
    %return vr
  %endif
  %if nRows == 0 || nCols == 0
    %return vr
  %endif
  %if sigSrc[1] < 0
    %assign identifier = param.Identifier
  %else
    %assign varGroupIdx = FcnSysVarGroupIndex(::CompiledModel.System[sigSrc[0]], "Parameter", sigSrc[1]) 
    %assign identifier = ::CompiledModel.VarGroups.VarGroup[varGroupIdx].Name + "." + param.Identifier
  %endif
  %selectfile xmlfile
  %assign startValue = FEVAL("grtfmi_start_value", param.Value)
  %if width == 1
    <%<fmiType> name="%<identifier>" valueReference="%<vr>" causality="parameter" variability="tunable" start="%<startValue>"/>
  %else
    <%<fmiType> name="%<identifier>" valueReference="%<vr>" causality="parameter" variability="tunable" start="%<startValue>">
    %foreach dimidx = SIZE(dims, 1)
      <Dimension start="%<dims[dimidx]>"/>
    %endforeach
    </%<fmiType>>
  %endif
  %selectfile incfile
    modelVariables[%<vr-1>].dtypeID = %<dtypeID>;
    modelVariables[%<vr-1>].size    = %<width>;
    modelVariables[%<vr-1>].address = &(rtmGetDefaultParam(S)->%<identifier>);
  %assign vr = vr + 1
  %return vr
%endfunction

%function ExternalInputFMI2(port, vr)
  %assign variableName = port.Identifier
  %assign dataName     = "&(rtmGetU(S)->%<port.Identifier>"
  %return VariableFMI2(port, variableName, dataName, vr, " causality=\"input\"", " start=\"0\"")
%endfunction

%function ExternalInputFMI3(port, vr)
  %assign dtypeID      = LibGetRecordDataTypeId(port)
  %assign dataTypeName = SLibGetRecordDataTypeName(port, "")
  %assign dims         = LibGetRecordDimensions(port)
  %assign width        = LibGetRecordWidth(port)
  %assign fmiType      = GetFMI3Type(dataTypeName)
  %assign attributes   = MinMaxAttributes(port, fmiType)
  %selectfile incfile
    modelVariables[%<vr-1>].dtypeID = %<dtypeID>;
    modelVariables[%<vr-1>].size    = %<width>;
    modelVariables[%<vr-1>].address = &(rtmGetU(S)->%<port.Identifier>);
  %selectfile xmlfile
    %if width == 1    
    <%<fmiType> name="%<port.Identifier>" valueReference="%<vr>" causality="input" start="0"%<attributes>/>
    %else
    <%<fmiType> name="%<port.Identifier>" valueReference="%<vr>" causality="input" start="0"%<attributes>>
      <Dimension start="%<width>"/>
    </%<fmiType>>
    %endif
  %return vr + 1
%endfunction

%function ExternalOutputFMI2(port, vr) Output
  %assign sysid        = port.Block[0]
  %assign blkid        = port.Block[1]
  %assign block        = System[sysid].Block[blkid]
  %assign variableName = block.Identifier
  %assign dataName     = "&(rtmGetY(S)->%<block.Identifier>"
  %return VariableFMI2(port, variableName, dataName, vr, " causality=\"output\"", "")
%endfunction

%function ExternalOutputFMI3(outp, vr) Output
  %assign sysid        = outp.Block[0]
  %assign blkid        = outp.Block[1]
  %assign outportBlock = System[sysid].Block[blkid]
  %with outportBlock
    %assign dataTypeName = SLibGetRecordDataTypeName(outp, "")
    %assign fmiType      = GetFMI3Type(dataTypeName)
    %assign dtypeID      = LibGetRecordDataTypeId(outp)
    %assign width        = LibGetRecordWidth(outp)
    %assign attributes   = MinMaxAttributes(outp, fmiType)
    %selectfile incfile
    modelVariables[%<vr-1>].dtypeID = %<dtypeID>;
    modelVariables[%<vr-1>].size    = %<width>;
    modelVariables[%<vr-1>].address = &(rtmGetY(S)->%<Identifier>);
    %selectfile xmlfile
    %if width == 1
    <%<fmiType> name="%<Identifier>" valueReference="%<vr>" causality="output"%<attributes>/>
    %else
    <%<fmiType> name="%<Identifier>" valueReference="%<vr>" causality="output"%<attributes>>
      <Dimension start="%<width>"/>
    </%<fmiType>>
    %endif
    %assign outputIndices = outputIndices + vr
  %endwith
  %return vr + 1
%endfunction

%function VariableFMI2(record, variableName, dataName, vr, variableAttr, typeAttr) Output
  %assign dataTypeName = SLibGetRecordDataTypeName(record, "")
  %assign fmiType      = GetFMIType(dataTypeName)
  %assign dtypeID      = LibGetRecordDataTypeId(record)
  %assign dims         = LibGetRecordDimensions(record)
  %assign width        = LibGetRecordWidth(record)
  %if ISEMPTY(fmiType)
    %assign dataType = ::CompiledModel.DataTypes.DataType[dtypeID]
    %if !ISFIELD(dataType, "Elements")
      %return vr
    %endif
    %foreach elementIdx = dataType.NumElements
      %assign element = dataType.Elements[elementIdx]
      %assign vr = VariableFMI2(element, "%<variableName>.%<element.Name>", "%<dataName>.%<element.Name>", vr, variableAttr, typeAttr)
    %endforeach
  %else
    %foreach index = width
      %if width == 1
        %assign dataSubs     = ""
        %assign variableSubs = ""
      %else
        %assign dataSubs     = "[%<index>]"
        %assign variableSubs = "[%<index+1>]"
      %endif
      %selectfile incfile
    modelVariables[%<vr-1>].dtypeID = %<dtypeID>;
    modelVariables[%<vr-1>].size    = 0;
    modelVariables[%<vr-1>].address = %<dataName>%<dataSubs>);
      %selectfile xmlfile
    <ScalarVariable name="%<variableName>%<variableSubs>" valueReference="%<vr>"%<variableAttr>>
      <%<fmiType>%<typeAttr>/>
    </ScalarVariable>
      %assign vr = vr + 1
    %endforeach
  %endif
  %return vr
%endfunction

%function BlockOutputFMI2(blockoutput, vr) Output
  %assign identifier   = LibGetRecordIdentifier(blockoutput)
  %assign variableName = identifier
  %assign dataName     = "&(rtmGetBlockIO(S)->%<identifier>"
  %return VariableFMI2(blockoutput, variableName, dataName, vr, "", "")
  %% %selectfile xmlfile
  %%  <!-- %<LibGetRecordIdentifier(blockoutput)> --> 
  %if (ISFIELD(blockoutput, "IsRemovedInIR") && blockoutput.IsRemovedInIR)
    %return vr
  %endif
  %assign dataTypeName = SLibGetRecordDataTypeName(blockoutput, "")
  %assign fmiType      = GetFMIType(dataTypeName)
  %assign dtypeID      = LibGetRecordDataTypeId(blockoutput)
  %assign width        = LibGetRecordWidth(blockoutput)
  %assign identifier   = LibGetRecordIdentifier(blockoutput)
  %assign variableName = identifier
  %if (ISFIELD(blockoutput, "GrSrc") && blockoutput.GrSrc[1] != -1)
    %assign varPath = LibGetFormattedBlockPath(SLibGrBlock(blockoutput.GrSrc))
    %assign varPath = FEVAL("grtfmi_block_path", varPath)
    %assign variableName = varPath + "." + variableName
  %endif
  %if ISEMPTY(fmiType)
    %assign dataType = ::CompiledModel.DataTypes.DataType[dtypeID]
    %if !ISFIELD(dataType, "Elements")
      %return vr
    %endif
    %foreach elementIdx = dataType.NumElements
      %assign element = dataType.Elements[elementIdx]
      %assign dataName = "&(rtmGetBlockIO(S)->%<identifier>.%<element.Name>"
      %assign vr = VariableFMI2(element, variableName, dataName, vr, "", "")
    %endforeach
  %else
%%    %assign dataName = "&(rtmGetBlockIO(S)->%<identifier>"
%%    %assign vr = VariableFMI2(blockoutput, variableName, dataName, vr)
  %endif
  %return vr
%endfunction
